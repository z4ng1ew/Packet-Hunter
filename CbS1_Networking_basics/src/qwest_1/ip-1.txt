Задание 1. Расчет адресов

Часть 1: Бинарная нотация IP-адресов

  Подробные вычисления перевода IP-адресов в бинарную нотацию

   1. IP-адрес: 178.101.89.7

    Октет 1: 178
Для перевода числа из десятичной системы в двоичную будем последовательно вычитать степени двойки:

1. 128 ≤ 178 → 1, остаток = 178 - 128 = 50
2. 64 > 50 → 0
3. 32 ≤ 50 → 1, остаток = 50 - 32 = 18
4. 16 ≤ 18 → 1, остаток = 18 - 16 = 2
5. 8 > 2 → 0
6. 4 > 2 → 0
7. 2 ≤ 2 → 1, остаток = 2 - 2 = 0
8. 1 > 0 → 0

Проверка: 128 + 32 + 16 + 2 = 178  
Бинарное представление: 10110010

    Октет 2: 101
1. 128 > 101 → 0
2. 64 ≤ 101 → 1, остаток = 101 - 64 = 37
3. 32 ≤ 37 → 1, остаток = 37 - 32 = 5
4. 16 > 5 → 0
5. 8 > 5 → 0
6. 4 ≤ 5 → 1, остаток = 5 - 4 = 1
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 64 + 32 + 4 + 1 = 101  
Бинарное представление: 01100101

    Октет 3: 89
1. 128 > 89 → 0
2. 64 ≤ 89 → 1, остаток = 89 - 64 = 25
3. 32 > 25 → 0
4. 16 ≤ 25 → 1, остаток = 25 - 16 = 9
5. 8 ≤ 9 → 1, остаток = 9 - 8 = 1
6. 4 > 1 → 0
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 64 + 16 + 8 + 1 = 89  
Бинарное представление: 01011001

    Октет 4: 7
1. 128 > 7 → 0
2. 64 > 7 → 0
3. 32 > 7 → 0
4. 16 > 7 → 0
5. 8 > 7 → 0
6. 4 ≤ 7 → 1, остаток = 7 - 4 = 3
7. 2 ≤ 3 → 1, остаток = 3 - 2 = 1
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 4 + 2 + 1 = 7  
Бинарное представление: 00000111

  Итоговая бинарная нотация для 178.101.89.7: 10110010.01100101.01011001.00000111

   2. IP-адрес: 201.57.153.161

    Октет 1: 201
1. 128 ≤ 201 → 1, остаток = 201 - 128 = 73
2. 64 ≤ 73 → 1, остаток = 73 - 64 = 9
3. 32 > 9 → 0
4. 16 > 9 → 0
5. 8 ≤ 9 → 1, остаток = 9 - 8 = 1
6. 4 > 1 → 0
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 128 + 64 + 8 + 1 = 201  
Бинарное представление: 11001001

    Октет 2: 57
1. 128 > 57 → 0
2. 64 > 57 → 0
3. 32 ≤ 57 → 1, остаток = 57 - 32 = 25
4. 16 ≤ 25 → 1, остаток = 25 - 16 = 9
5. 8 ≤ 9 → 1, остаток = 9 - 8 = 1
6. 4 > 1 → 0
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 32 + 16 + 8 + 1 = 57  
Бинарное представление: 00111001

    Октет 3: 153
1. 128 ≤ 153 → 1, остаток = 153 - 128 = 25
2. 64 > 25 → 0
3. 32 > 25 → 0
4. 16 ≤ 25 → 1, остаток = 25 - 16 = 9
5. 8 ≤ 9 → 1, остаток = 9 - 8 = 1
6. 4 > 1 → 0
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 128 + 16 + 8 + 1 = 153  
Бинарное представление: 10011001

    Октет 4: 161
1. 128 ≤ 161 → 1, остаток = 161 - 128 = 33
2. 64 > 33 → 0
3. 32 ≤ 33 → 1, остаток = 33 - 32 = 1
4. 16 > 1 → 0
5. 8 > 1 → 0
6. 4 > 1 → 0
7. 2 > 1 → 0
8. 1 ≤ 1 → 1, остаток = 1 - 1 = 0

Проверка: 128 + 32 + 1 = 161  
Бинарное представление: 10100001

Итоговая бинарная нотация для 201.57.153.161: 11001001.00111001.10011001.10100001

   Метод перевода
Для перевода десятичного числа в двоичное используется метод последовательного деления на 2 или вычитания степеней двойки. В данном случае мы использовали метод вычитания степеней двойки (128, 64, 32, 16, 8, 4, 2, 1), что является более наглядным для 8-битных октетов IP-адресов. Каждый раз, когда текущая степень двойки меньше или равна оставшемуся числу, мы ставим 1 и вычитаем эту степень из числа. Если степень больше числа, ставим 0 и переходим к следующей меньшей степени.




Ответ: 

Нотация 178.101.89.7 : 10110010.01100101.01011001.00000111
Нотация 201.57.153.161 : 11001001.00111001.10011001.10100001

- Также расчёт можно сделать с помошью утилиты (скриншоты в папке img/ipcalc_1.png, img/ipcalc_2.png)













-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Часть 2: Расчет масок подсетей

Ответ: 
    Сегмент	            Машин	Маска
    Технологический	    3	    /29 (6 хостов)
    Серверный	        16	    /27 (30 хостов)
    Пользовательский	32	    /26 (62 хоста)



1. Технологический сегмент (3 машины)
   - Требуется адресов: 3 + 2 = 5
   - Ближайшая степень двойки: 2^3 = 8
   - Количество бит для хостов: 3
   - Маска: 32 - 3 = 29
   - Доступных адресов: 2^3 - 2 = 6
   - Вывод: маска /29

2. Серверный сегмент (16 машин)
   - Требуется адресов: 16 + 2 = 18
   - Ближайшая степень двойки: 2^5 = 32
   - Количество бит для хостов: 5
   - Маска: 32 - 5 = 27
   - Доступных адресов: 2^5 - 2 = 30
   - Вывод: маска /27

3. Пользовательский сегмент (32 машины)
   - Требуется адресов: 32 + 2 = 34
   - Ближайшая степень двойки: 2^6 = 64
   - Количество бит для хостов: 6
   - Маска: 32 - 6 = 26
   - Доступных адресов: 2^6 - 2 = 62
   - Вывод: маска /26

Обоснование:
При выборе масок подсетей учитывалось необходимое количество адресов с запасом на будущее развитие.
Для каждого сегмента была выбрана минимально возможная маска, обеспечивающая достаточное количество адресов
для текущих устройств плюс небольшой запас для расширения сети. Такой подход позволяет эффективно
использовать адресное пространство и избежать нехватки адресов в будущем. При этом не выделены подсети избыточного размера, например, /17.






   Объяснение задания по расчету масок подсетей:
Что такое маски подсетей и зачем они нужны?
Маска подсети (subnet mask) - это 32-битное число, которое определяет, как IP-адрес делится на две части:

1. Сетевую часть (network portion) - идентифицирует сеть
2. Хостовую часть (host portion) - идентифицирует конкретное устройство в сети

В CIDR-нотации (Classless Inter-Domain Routing - Бесклассовая междоменная маршрутизация) маска записывается как "/n", где n - количество бит, выделенных под сетевую часть. Например, /24 означает, что первые 24 бита IP-адреса относятся к сети, а оставшиеся 8 бит (32-24=8) - к хостам.

Важно понимать: в любой подсети есть 2 служебных адреса, которые нельзя использовать для устройств:

Адрес сети (первый адрес)
Широковещательный адрес (последний адрес)
Поэтому формула для вычисления количества доступных хостов:
2^(32-n) - 2, где n - маска подсети




Логика выделения масок для каждого сегмента
1. Технологический сегмент (3 машины)
Анализ требований:

Нам нужно разместить 3 устройства
Плюс 2 служебных адреса (сеть и broadcast)
Итого требуется: 3 + 2 = 5 адресов
Расчет маски:

Найдем минимальную степень двойки, которая ≥ 5:
2² = 4 (недостаточно, так как 4 < 5)
2³ = 8 (подходит, так как 8 ≥ 5)
Значит, нужно 3 бита для хостовой части
Маска = 32 - 3 = 29
Проверка: 2³ - 2 = 8 - 2 = 6 доступных адресов
Почему именно /29?

Маска /30 дала бы только 2 адреса (4 - 2 = 2), что недостаточно для 3 машин
Маска /28 дала бы 14 адресов (16 - 2 = 14), что избыточно и привело бы к неэффективному использованию адресного пространства
Маска /29 дает ровно 6 адресов, что достаточно для 3 машин с небольшим запасом на будущее
Вывод: Для технологического сегмента оптимальна маска /29

2. Серверный сегмент (16 машин)
Анализ требований:

Нам нужно разместить 16 серверов
Плюс 2 служебных адреса
Итого требуется: 16 + 2 =
18 адресов
Расчет маски:

Найдем минимальную степень двойки, которая ≥ 18:
2⁴ = 16 (недостаточно, так как 16 < 18)
2⁵ = 32 (подходит, так как 32 ≥ 18)
Значит, нужно 5 бит для хостовой части
Маска = 32 - 5 = 27
Проверка: 2⁵ - 2 =
32 - 2 = 30 доступных адресов
Почему именно /27?

Маска /28 дала бы только 14 адресов (16 -
2 = 14), что недостаточно для 16 серверов
Маска /26 дала бы 62 адреса (64 - 2 = 62), что избыточно и неэффективно использовало бы адресное пространство
Маска /27 дает 30 адресов, что достаточно для 16 серверов с запасом на добавление еще 14 серверов
Вывод: Для серверного сегмента оптимальна маска /27

3. Пользовательский сегмент (32 машины)
Анализ требований:

Нам нужно разместить 32 пользовательских устройства
Плюс 2 служебных адреса
Итого требуется: 32 + 2 = 34 адреса


Расчет маски:

Найдем минимальную степень двойки, которая ≥ 34:
2⁵ = 32 (недостаточно, так как 32 < 34)
2⁶ = 64 (подходит, так как 64 ≥ 34)
Значит, нужно 6 бит для хостовой части
Маска = 32 - 6 = 26
Проверка: 2⁶ - 2 = 64 - 2 = 62 доступных адресов
Почему именно /26?

Маска /27 дала бы только 30 адресов (32 - 2 = 30), что недостаточно для 32 пользователей 
Маска /25 дала бы 126 адресов (128 - 2 = 126), что чрезмерно избыточно и привело бы к значительному расточительству адресного пространства.
Маска /26 дает 62 адреса, что достаточно для 32 пользователей с возможностью добавить еще 30 устройств

Вывод: Для пользовательского сегмента оптимальна маска /26

Общая логика проектирования
При выборе масок подсетей мы руководствуемся принципом "золотой середины":

Не используем слишком маленькие подсети (риск нехватки адресов)
Не используем слишком большие подсети (расточительство адресного пространства)
Выбираем минимально возможную маску, обеспечивающую достаточное количество адресов с небольшим запасом на будущее
Этот подход соответствует рекомендациям из статьи на Habr, где говорится: "Выделение подсетей в общем-то произвольное, соответствующее только числу узлов в этой локальной сети с учётом возможного роста."

Также важно отметить, что для Point-to-Point соединений (как упоминается в статье) обычно используется маска /30, которая дает ровно 2 адреса для хостов - как раз то, что нужно для соединения двух устройств. Но в нашем случае мы имеем сегменты с большим количеством устройств, поэтому используем другие маски.

Правильный выбор масок подсетей - это важная часть сетевого планирования, о котором так подробно говорится в статье. Это позволяет эффективно использовать адресное пространство и обеспечивает гибкость для будущего развития сети.